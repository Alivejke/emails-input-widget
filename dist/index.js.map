{"version":3,"sources":["index.ts"],"names":[],"mappings":";;;AAybA,aAAA,IAnaK,EAmaL,EAAA,MAAA,KAAA,UAAA,WAAA,OAAA,EAAA,OAAA,QAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,IAAA,IAAA,KAAA,EAAA,UAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,IAAA,MAAA,KAAA,YAAA,EAAA,MAAA,KAAA,gBAAA,WAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,GAAA,UAAA,GAAA,OAAA,IAAA,EAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,IAAA,IAAA,IAAA,EAAA,UAAA,GAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAzbA,QAAA,gBAsBA,SAAK,GACH,EAAA,OAAA,SACA,EAAA,QAAA,UACA,EAAA,UAAA,WACA,EAAA,aAAA,cACA,EAAA,YAAA,aALF,CAAK,IAAA,EAAO,KAQZ,IAAA,EAAA,WAUE,SAAA,EAAY,GAAZ,IAAA,EAAA,KAAc,EAAA,EAAA,IATN,KAAA,MAAe,CACrB,OAAQ,IAIF,KAAA,QAA8B,KAC9B,KAAA,OAA6B,KAC7B,KAAA,UAAoB,sBA4DpB,KAAA,eAAiB,SAAC,GAGtB,GAAgB,KAAhB,EAAM,OACU,MAAhB,EAAM,OACQ,MAAd,EAAM,KACQ,UAAd,EAAM,IACN,CACA,EAAM,iBAEA,IACE,EADoB,EAAM,OAC1B,UAEJ,IACF,EAAK,IAAI,GACT,EAAK,kBAKH,KAAA,aAAe,SAAC,GAClB,IAAA,EAA+B,UAEA,IAAxB,EAAM,cACf,EAAiB,OAAe,cAAc,QAAQ,QAC7C,EAAM,gBACf,EAAgB,EAAM,cAAc,QAAQ,eAG1C,IACF,EAAM,iBACN,EAAK,IAAI,GACT,EAAK,iBAID,KAAA,YAAc,SAAC,GACf,IACE,EADoB,EAAM,OAC1B,UAEJ,IACF,EAAK,IAAI,GACT,EAAK,iBAID,KAAA,cAAgB,SAAC,GACjB,IAAA,EAAsB,EAAM,OAG1B,OAFA,EAAA,QAAA,QAGD,KAAA,EAAQ,aACL,IAAA,EAA2B,EAAO,WACrC,QAAQ,IAEP,GACF,EAAK,OAAO,GAEd,MACG,KAAA,EAAQ,YACP,EAAK,SAEF,EAAK,OAAe,UACtB,EAAK,OAAe,YAErB,EAAK,OAAO,WA4Md,KAAA,OAAS,SAAC,GACV,IAAA,EAAS,EAAK,MAAM,OAAO,OAC/B,SAAC,GACQ,OAAA,EAAM,KAAO,IAIxB,EAAK,SACH,CACE,OAAM,GAER,WACE,EAAK,YAAY,EAAQ,iBAlVxB,KAAA,MAAQ,EAER,KAAA,eACA,KAAA,oBA2YT,OAxYU,EAAA,UAAA,SAAR,SAAiB,EAA2B,GACrC,KAAA,MAAK,EAAA,EAAA,GACL,KAAK,OACL,GAGA,KAAA,4BAED,GACF,KAII,EAAA,UAAA,WAAR,WACO,KAAA,SAAS,CACZ,OAAQ,MAKJ,EAAA,UAAA,WAAR,WACS,MAAA,uCAAuC,QAAQ,QAAS,SAAS,GAClE,IAAA,EAAqB,GAAhB,KAAK,SAAiB,EAExB,OADK,MAAN,EAAY,EAAS,EAAJ,EAAW,GACzB,SAAS,OAMd,EAAA,UAAA,SAAR,SAAiB,GACT,IAAA,EAAW,CACV,IAAA,QACA,IAAA,OACA,IAAA,OACA,IAAA,SACA,IAAA,SACA,IAAA,SACA,IAAA,WAEA,OAAA,EAAM,QAAQ,eAAe,SAAC,GAC5B,OAAA,EAAI,MAIP,EAAA,UAAA,aAAR,WACM,KAAK,SACF,KAAA,OAAO,UAAY,KA2EpB,EAAA,UAAA,kBAAR,WACM,KAAK,SACF,KAAA,OAAO,iBAAiB,UAAW,KAAK,gBACxC,KAAA,OAAO,iBAAiB,QAAS,KAAK,cACtC,KAAA,OAAO,iBAAiB,OAAQ,KAAK,cAGxC,KAAK,SACF,KAAA,QAAQ,iBAAiB,QAAS,KAAK,gBAIxC,EAAA,UAAA,qBAAR,WACM,KAAK,SACF,KAAA,OAAO,oBAAoB,UAAW,KAAK,gBAC3C,KAAA,OAAO,oBAAoB,QAAS,KAAK,cACzC,KAAA,OAAO,oBAAoB,OAAQ,KAAK,cAG3C,KAAK,SACF,KAAA,QAAQ,oBAAoB,QAAS,KAAK,gBAI3C,EAAA,UAAA,kBAAR,SAA0B,GAMjB,OALuB,EAC3B,MAAM,KACN,IAAI,SAAA,GAAS,OAAA,EAAM,QAAQ,aAAc,MACzC,OAAO,SAAA,GAAS,OAAA,KAOb,EAAA,UAAA,cAAR,SAAsB,GACb,MAAA,iBAAiB,KAAK,IAGvB,EAAA,UAAA,kBAAR,SAA0B,GAA1B,IAAA,EAAA,KAIS,OAFa,iBAAX,EAAsB,KAAK,kBAAkB,GAAU,GAE9C,IAAI,SAAA,GACb,MAAA,CACL,GAAI,EAAK,aACT,MAAO,EAAK,SAAS,GACrB,QAAS,EAAK,cAAc,OAK1B,EAAA,UAAA,kBAAR,WACO,KAAA,MAAM,UAAY,IAGjB,EAAA,UAAA,YAAR,SAAoB,EAAe,GAC7B,IAAA,EAE8B,mBAAvB,OAAO,YAChB,EAAQ,IAAI,YAAY,EAAM,CAAE,OAAQ,KAExC,EAAQ,SAAS,YAAY,gBACvB,gBAAgB,GAAM,GAAO,EAAO,GAGvC,KAAA,MAAM,cAAc,IAGnB,EAAA,UAAA,oBAAR,SAA4B,EAAgB,GAA5C,IAAA,EAAA,KACE,EAAK,QAAQ,SAAA,GACX,EAAK,YAAY,EAAO,MAIpB,EAAA,UAAA,mBAAR,WACQ,IAAA,EAAS,SAAS,cAAc,OAI/B,OAHP,EAAO,UAAU,IAAO,KAAK,UAAS,WACtC,EAAO,aAAa,kBAAmB,QAEhC,GAGD,EAAA,UAAA,cAAR,SAAsB,GACd,IAAA,EAAsB,SAAS,cAAc,OACnD,EAAO,QAAQ,IAAM,EAAM,GAC3B,EAAO,UAAU,IAAO,KAAK,UAAS,WACjC,EAAM,SACT,EAAO,UAAU,IAAO,KAAK,UAAS,oBAGlC,IAAA,EAAsB,SAAS,cAAc,QACnD,EAAO,UAAY,EAAM,MACzB,EAAO,UAAU,IAAO,KAAK,UAAS,iBACtC,EAAO,YAAY,GAEb,IAAA,EAAuB,SAAS,cAAc,QAK7C,OAJP,EAAQ,UAAU,IAAO,KAAK,UAAS,kBACvC,EAAQ,QAAQ,OAAS,EAAQ,aACjC,EAAO,YAAY,GAEZ,GAGD,EAAA,UAAA,aAAR,WAAA,IAAA,EAAA,KACQ,EAAU,SAAS,cAAc,OACvC,EAAQ,QAAQ,OAAS,EAAQ,YACjC,EAAQ,UAAU,IAAI,KAAK,WAErB,IAAA,EAAS,KAAK,qBACpB,EAAQ,YAAY,GAEd,IAAA,EAA4B,SAAS,yBACtC,KAAA,MAAM,OAAO,QAChB,SAAC,GACC,EAAQ,YAAY,EAAK,cAAc,MAG3C,EAAQ,aAAa,EAAS,GAEzB,KAAA,MAAM,YAAY,GAElB,KAAA,QAAU,EACV,KAAA,OAAS,EAET,KAAA,YAAY,EAAQ,SAGnB,EAAA,UAAA,kBAAR,WACM,OAAA,KAAK,QACA,MAAM,UAAU,MACpB,KAAK,KAAK,QAAQ,YAClB,IAAI,SAAC,GAES,IAAA,EAAA,EAAA,QAAA,IAEN,MAAA,CACL,SAAoB,IAAR,EAAsB,EAAM,GACxC,IAAK,KAGR,OAAO,SAAA,GAAS,OAAA,EAAM,MAElB,IAIH,EAAA,UAAA,gBAAR,SAAwB,GAAxB,IAAA,EAAA,KACM,GAAA,KAAK,QAAS,CACR,IACF,EADE,KAAA,MAAA,OAC+B,OACrC,SAAC,GACQ,OAA0C,IAA1C,EAAmB,QAAQ,EAAM,MAIxC,GAAA,GAAa,EAAU,OAAQ,CAC3B,IAAA,EAA+B,SAAS,yBAC9C,EAAU,QACR,SAAC,GACC,EAAW,YAAY,EAAK,cAAc,MAGzC,KAAA,QAAQ,aAAa,EAAY,KAAK,WAKzC,EAAA,UAAA,oBAAR,SACE,GADF,IAAA,EAAA,KAGQ,EAAoC,KAAK,MAAM,OAAO,IAC1D,SAAA,GAAS,OAAA,EAAM,KAEK,EAAe,OACnC,SAAC,GACQ,OAA2C,IAA3C,EAAmB,QAAQ,EAAM,OAI9B,QACZ,SAAC,GACK,EAAK,SACP,EAAK,QAAQ,YAAY,EAAM,QAM/B,EAAA,UAAA,0BAAR,WACQ,IAAA,EAAiB,KAAK,oBACtB,EAAoC,EAAe,IACvD,SAAA,GAAS,OAAA,EAAM,MAEZ,KAAA,gBAAgB,GAChB,KAAA,oBAAoB,IAoBpB,EAAA,UAAA,OAAP,WACS,OAAA,KAAK,MAAM,QAGb,EAAA,UAAA,SAAP,WACS,OAAA,KAAK,SAAS,OAAO,SAAA,GAAS,OAAA,EAAM,WAGtC,EAAA,UAAA,WAAP,WACS,OAAA,KAAK,SAAS,OAAO,SAAA,GAAS,OAAC,EAAM,WAGvC,EAAA,UAAA,SAAP,WACQ,IAAA,EAAQ,KAAK,WAAW,OACxB,EAAU,KAAK,aAAa,OAE3B,MAAA,CACL,MAAK,EACL,QAAO,EACP,MAAO,EAAQ,IAIZ,EAAA,UAAA,SAAP,SAAgB,GAAhB,IAAA,EAAA,KACQ,EAAY,KAAK,kBAAkB,GAEpC,KAAA,SACH,CACE,OAAQ,GAEV,WACE,EAAK,oBAAoB,EAAQ,UAAW,MAK3C,EAAA,UAAA,IAAP,SAAW,GAAX,IAAA,EAAA,KACQ,EAAY,KAAK,kBAAkB,GAEpC,KAAA,SACH,CACE,OAAM,EAAM,KAAK,MAAM,OAAW,IAEpC,WACE,EAAK,oBAAoB,EAAQ,UAAW,MAK3C,EAAA,UAAA,QAAP,WACO,KAAA,aACA,KAAA,uBACA,KAAA,oBACA,KAAA,YAAY,EAAQ,UAE7B,EAzZA,GA2ZA,QAAA,QAAe","file":"index.js","sourceRoot":"../src/components/EmailsInput","sourcesContent":["import \"./index.scss\";\r\n\r\ntype Email = {\r\n  id: string;\r\n  value: string;\r\n  isValid: boolean;\r\n};\r\n\r\ntype State = {\r\n  emails: Array<Email>;\r\n};\r\n\r\ntype Count = {\r\n  valid: number;\r\n  invalid: number;\r\n  total: number;\r\n};\r\n\r\ntype Props = {\r\n  $el: HTMLElement;\r\n};\r\n\r\nenum Actions {\r\n  RENDER = \"render\",\r\n  DESTROY = \"destroy\",\r\n  ADD_EMAIL = \"addEmail\",\r\n  REMOVE_EMAIL = \"removeEmail\",\r\n  FOCUS_INPUT = \"focusInput\"\r\n}\r\n\r\nclass EmailsInput {\r\n  private state: State = {\r\n    emails: []\r\n  };\r\n\r\n  private $root: HTMLElement;\r\n  private $widget: HTMLElement | null = null;\r\n  private $input: HTMLElement | null = null;\r\n  private className: string = \"emails-input-widget\";\r\n\r\n  constructor({ $el }: Props) {\r\n    this.$root = $el;\r\n\r\n    this.renderWidget();\r\n    this.addEventListeners();\r\n  }\r\n\r\n  private setState(nextState: Partial<State>, callback?: () => void): void {\r\n    this.state = {\r\n      ...this.state,\r\n      ...nextState\r\n    };\r\n\r\n    this.updateWidgetOnStateChange();\r\n\r\n    if (callback) {\r\n      callback();\r\n    }\r\n  }\r\n\r\n  private resetState(): void {\r\n    this.setState({\r\n      emails: []\r\n    });\r\n  }\r\n\r\n  // Clientside usage only\r\n  private generateId(): string {\r\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\r\n      var r = (Math.random() * 16) | 0,\r\n        v = c === \"x\" ? r : (r & 0x3) | 0x8;\r\n      return v.toString(16);\r\n    });\r\n  }\r\n\r\n  // This is very naive way of sanitizing input, a proper library should be\r\n  // used instead at least, like: https://github.com/jitbit/HtmlSanitizer\r\n  private sanitize(input: string): string {\r\n    const map: any = {\r\n      \"&\": \"&amp;\",\r\n      \"<\": \"&lt;\",\r\n      \">\": \"&gt;\",\r\n      '\"': \"&quot;\",\r\n      \"'\": \"&#x27;\",\r\n      \"/\": \"&#x2F;\",\r\n      \"`\": \"&grave;\"\r\n    };\r\n    return input.replace(/[&<>\"'/`]/gi, (match: string) => {\r\n      return map[match];\r\n    });\r\n  }\r\n\r\n  private clearInputEl(): void {\r\n    if (this.$input) {\r\n      this.$input.innerHTML = \"\";\r\n    }\r\n  }\r\n\r\n  private onInputKeydown = (event: KeyboardEvent): void => {\r\n    // event.which for IE fallback\r\n    if (\r\n      event.which === 13 ||\r\n      event.which === 188 ||\r\n      event.key === \",\" ||\r\n      event.key === \"Enter\"\r\n    ) {\r\n      event.preventDefault();\r\n\r\n      const target: HTMLElement = event.target as HTMLElement;\r\n      const { innerText }: { innerText: string } = target;\r\n\r\n      if (innerText) {\r\n        this.add(innerText);\r\n        this.clearInputEl();\r\n      }\r\n    }\r\n  };\r\n\r\n  private onInputPaste = (event: ClipboardEvent): void => {\r\n    let clipboardData: string | null = null;\r\n\r\n    if (typeof event.clipboardData === \"undefined\") {\r\n      clipboardData = (window as any).clipboardData.getData(\"Text\");\r\n    } else if (event.clipboardData) {\r\n      clipboardData = event.clipboardData.getData(\"text/plain\");\r\n    }\r\n\r\n    if (clipboardData) {\r\n      event.preventDefault();\r\n      this.add(clipboardData);\r\n      this.clearInputEl();\r\n    }\r\n  };\r\n\r\n  private onInputBlur = (event: FocusEvent): void => {\r\n    const target: HTMLElement = event.target as HTMLElement;\r\n    const { innerText }: { innerText: string } = target;\r\n\r\n    if (innerText) {\r\n      this.add(innerText);\r\n      this.clearInputEl();\r\n    }\r\n  };\r\n\r\n  private onWidgetClick = (event: MouseEvent): void => {\r\n    const target: HTMLElement = event.target as HTMLElement;\r\n    const { action }: { action?: string } = target.dataset;\r\n\r\n    switch (action) {\r\n      case Actions.REMOVE_EMAIL:\r\n        const key: string | undefined = (target.parentNode as HTMLElement)\r\n          .dataset.key;\r\n\r\n        if (key) {\r\n          this.remove(key);\r\n        }\r\n        break;\r\n      case Actions.FOCUS_INPUT:\r\n        if (this.$input) {\r\n          // Special ie case\r\n          if ((this.$input as any).setActive) {\r\n            (this.$input as any).setActive();\r\n          } else {\r\n            this.$input.focus();\r\n          }\r\n        }\r\n    }\r\n  };\r\n\r\n  private addEventListeners(): void {\r\n    if (this.$input) {\r\n      this.$input.addEventListener(\"keydown\", this.onInputKeydown);\r\n      this.$input.addEventListener(\"paste\", this.onInputPaste);\r\n      this.$input.addEventListener(\"blur\", this.onInputBlur);\r\n    }\r\n\r\n    if (this.$widget) {\r\n      this.$widget.addEventListener(\"click\", this.onWidgetClick);\r\n    }\r\n  }\r\n\r\n  private removeEventListeners(): void {\r\n    if (this.$input) {\r\n      this.$input.removeEventListener(\"keydown\", this.onInputKeydown);\r\n      this.$input.removeEventListener(\"paste\", this.onInputPaste);\r\n      this.$input.removeEventListener(\"blur\", this.onInputBlur);\r\n    }\r\n\r\n    if (this.$widget) {\r\n      this.$widget.removeEventListener(\"click\", this.onWidgetClick);\r\n    }\r\n  }\r\n\r\n  private parseEmailsString(emailsString: string): Array<string> {\r\n    const emails: Array<string> = emailsString\r\n      .split(\",\")\r\n      .map(email => email.replace(/^\\s+|\\s+$/g, \"\"))\r\n      .filter(email => email);\r\n\r\n    return emails;\r\n  }\r\n\r\n  // Typically FE validation shouldn't be complicated, strict\r\n  // validation should be done on backend side\r\n  private validateEmail(email: string): boolean {\r\n    return /^\\S+@\\S+\\.\\S+$/.test(email);\r\n  }\r\n\r\n  private generateEmailList(emails: string | Array<string>): Array<Email> {\r\n    const emailsList: Array<string> =\r\n      typeof emails === \"string\" ? this.parseEmailsString(emails) : emails;\r\n\r\n    return emailsList.map(email => {\r\n      return {\r\n        id: this.generateId(),\r\n        value: this.sanitize(email),\r\n        isValid: this.validateEmail(email)\r\n      };\r\n    });\r\n  }\r\n\r\n  private removeDOMElements(): void {\r\n    this.$root.innerHTML = \"\";\r\n  }\r\n\r\n  private trigerEvent(type: Actions, data?: any): void {\r\n    let event;\r\n\r\n    if (typeof window.CustomEvent === \"function\") {\r\n      event = new CustomEvent(type, { detail: data });\r\n    } else {\r\n      event = document.createEvent(\"CustomEvent\");\r\n      event.initCustomEvent(type, false, false, data);\r\n    }\r\n\r\n    this.$root.dispatchEvent(event);\r\n  }\r\n\r\n  private trigerEventsForList(event: Actions, list: Array<any>): void {\r\n    list.forEach(item => {\r\n      this.trigerEvent(event, item);\r\n    });\r\n  }\r\n\r\n  private createInputFieldEl(): HTMLElement {\r\n    const $input = document.createElement(\"div\");\r\n    $input.classList.add(`${this.className}__input`);\r\n    $input.setAttribute(\"contenteditable\", \"true\");\r\n\r\n    return $input;\r\n  }\r\n\r\n  private createEmailEl(email: Email): HTMLElement {\r\n    const $email: HTMLElement = document.createElement(\"div\");\r\n    $email.dataset.key = email.id;\r\n    $email.classList.add(`${this.className}__email`);\r\n    if (!email.isValid) {\r\n      $email.classList.add(`${this.className}__email--invalid`);\r\n    }\r\n\r\n    const $value: HTMLElement = document.createElement(\"span\");\r\n    $value.innerHTML = email.value;\r\n    $value.classList.add(`${this.className}__email-value`);\r\n    $email.appendChild($value);\r\n\r\n    const $remove: HTMLElement = document.createElement(\"span\");\r\n    $remove.classList.add(`${this.className}__email-remove`);\r\n    $remove.dataset.action = Actions.REMOVE_EMAIL;\r\n    $email.appendChild($remove);\r\n\r\n    return $email;\r\n  }\r\n\r\n  private renderWidget(): void {\r\n    const $widget = document.createElement(\"div\");\r\n    $widget.dataset.action = Actions.FOCUS_INPUT;\r\n    $widget.classList.add(this.className);\r\n\r\n    const $input = this.createInputFieldEl();\r\n    $widget.appendChild($input);\r\n\r\n    const $emails: DocumentFragment = document.createDocumentFragment();\r\n    this.state.emails.forEach(\r\n      (email: Email): void => {\r\n        $emails.appendChild(this.createEmailEl(email));\r\n      }\r\n    );\r\n    $widget.insertBefore($emails, $input);\r\n\r\n    this.$root.appendChild($widget);\r\n\r\n    this.$widget = $widget;\r\n    this.$input = $input;\r\n\r\n    this.trigerEvent(Actions.RENDER);\r\n  }\r\n\r\n  private getRenderedEmails(): Array<{ key: string; $el: HTMLElement }> {\r\n    if (this.$widget) {\r\n      return Array.prototype.slice\r\n        .call(this.$widget.childNodes)\r\n        .map((node: ChildNode) => {\r\n          const {\r\n            dataset: { key }\r\n          } = node as HTMLElement;\r\n          return {\r\n            key: typeof key !== \"undefined\" ? key : \"\",\r\n            $el: node as HTMLElement\r\n          };\r\n        })\r\n        .filter(email => email.key);\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private renderNewEmails(renderedEmailsKeys: Array<string>): void {\r\n    if (this.$widget) {\r\n      const { emails } = this.state;\r\n      const newEmails: Array<Email> = emails.filter(\r\n        (email: Email): boolean => {\r\n          return renderedEmailsKeys.indexOf(email.id) === -1;\r\n        }\r\n      );\r\n\r\n      if (newEmails && newEmails.length) {\r\n        const $newEmails: DocumentFragment = document.createDocumentFragment();\r\n        newEmails.forEach(\r\n          (email: Email): void => {\r\n            $newEmails.appendChild(this.createEmailEl(email));\r\n          }\r\n        );\r\n        this.$widget.insertBefore($newEmails, this.$input);\r\n      }\r\n    }\r\n  }\r\n\r\n  private removeDeletedEmails(\r\n    renderedEmails: Array<{ key: string; $el: HTMLElement }>\r\n  ): void {\r\n    const existingEmailsKeys: Array<string> = this.state.emails.map(\r\n      email => email.id\r\n    );\r\n    const deletedEmails = renderedEmails.filter(\r\n      (email): boolean => {\r\n        return existingEmailsKeys.indexOf(email.key) === -1;\r\n      }\r\n    );\r\n\r\n    deletedEmails.forEach(\r\n      (email): void => {\r\n        if (this.$widget) {\r\n          this.$widget.removeChild(email.$el);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  private updateWidgetOnStateChange(): void {\r\n    const renderedEmails = this.getRenderedEmails();\r\n    const renderedEmailsKeys: Array<string> = renderedEmails.map(\r\n      email => email.key\r\n    );\r\n    this.renderNewEmails(renderedEmailsKeys);\r\n    this.removeDeletedEmails(renderedEmails);\r\n  }\r\n\r\n  private remove = (id: string): void => {\r\n    const emails = this.state.emails.filter(\r\n      (email): boolean => {\r\n        return email.id !== id;\r\n      }\r\n    );\r\n\r\n    this.setState(\r\n      {\r\n        emails\r\n      },\r\n      () => {\r\n        this.trigerEvent(Actions.REMOVE_EMAIL);\r\n      }\r\n    );\r\n  };\r\n\r\n  public getAll(): Array<Email> {\r\n    return this.state.emails;\r\n  }\r\n\r\n  public getValid(): Array<Email> {\r\n    return this.getAll().filter(email => email.isValid);\r\n  }\r\n\r\n  public getInvalid(): Array<Email> {\r\n    return this.getAll().filter(email => !email.isValid);\r\n  }\r\n\r\n  public getCount(): Count {\r\n    const valid = this.getValid().length;\r\n    const invalid = this.getInvalid().length;\r\n\r\n    return {\r\n      valid,\r\n      invalid,\r\n      total: valid + invalid\r\n    };\r\n  }\r\n\r\n  public resetAll(emails: string | Array<string>): void {\r\n    const emailList = this.generateEmailList(emails);\r\n\r\n    this.setState(\r\n      {\r\n        emails: emailList\r\n      },\r\n      () => {\r\n        this.trigerEventsForList(Actions.ADD_EMAIL, emailList);\r\n      }\r\n    );\r\n  }\r\n\r\n  public add(emails: string | Array<string>): void {\r\n    const emailList = this.generateEmailList(emails);\r\n\r\n    this.setState(\r\n      {\r\n        emails: [...this.state.emails, ...emailList]\r\n      },\r\n      () => {\r\n        this.trigerEventsForList(Actions.ADD_EMAIL, emailList);\r\n      }\r\n    );\r\n  }\r\n\r\n  public destroy(): void {\r\n    this.resetState();\r\n    this.removeEventListeners();\r\n    this.removeDOMElements();\r\n    this.trigerEvent(Actions.DESTROY);\r\n  }\r\n}\r\n\r\nexport default EmailsInput;\r\n"]}